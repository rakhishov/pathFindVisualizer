{"version":3,"sources":["coding/pathFind/node/Node.jsx","coding/pathFind/PathFind.jsx","coding/algorithm/bfs.js","coding/algorithm/dfs.js","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","row","col","isStart","isGoal","isWall","onMouseDown","onMouseEnter","onMouseUp","extra","id","className","Component","PathFind","state","board","startnode_row","startnode_col","GOALNODE_ROW","GOALNODE_COL","mouseIsPressed","isRunning","isBoardClean","numOfExpandedNodes","numOfPathNodes","chooseStart","chooseGoal","changeWall","setState","getInitBoard","newBoard","changeStart","changeGoal","wallGenerate","isVisited","parent","i","currRow","j","node","newNode","push","algo","visited","start","goal","queue","curNode","shift","undefined","nextNode","length","bfs","stack","pop","dfs","console","log","alert","way","shortPath","currNode","unshift","shortWay","visualise","path","setTimeout","animatePath","document","getElementById","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","class","Button","variant","onClick","search","clearGrid","cond","slice","querySelector","classList","remove","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8c6cccd5.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport \"./Node.css\";\n\nexport default class Node extends Component{\n    render(){\n        const {\n            row,\n            col,\n            isStart,\n            isGoal,\n            isWall,\n            onMouseDown,\n            onMouseEnter,\n            onMouseUp\n        } = this.props\n\n        const extra = isGoal\n        ? 'node-goal'\n        : isStart\n        ? 'node-start'\n        : isWall\n        ? 'node-wall'\n        : '';\n        \n        return(<div\n        id = {`node-${row}-${col}`}\n        className = {`node ${extra}`}\n        onMouseDown = {()=> onMouseDown(row, col)}\n        onMouseEnter = {()=> onMouseEnter(row, col)}\n        onMouseUp = {()=> onMouseUp(row, col)}\n\n\n        ></div>);\n    }\n}","import React, {Component} from \"react\";\nimport {bfs} from \"../algorithm/bfs\"\nimport Node from \"./node/Node\"\nimport \"./PathFind.css\"\nimport Button from 'react-bootstrap/Button';\nimport {dfs} from \"../algorithm/dfs\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst numOfRows = 25;\nconst numOfColumns = 50;\n\nexport default class PathFind extends Component{\n    constructor(){\n        super();\n        this.state = {\n            board: [],\n            startnode_row: 10,\n            startnode_col: 15,\n            GOALNODE_ROW: 16,\n            GOALNODE_COL: 30,\n            mouseIsPressed: false,\n            isRunning: false,\n            isBoardClean: true,\n            numOfExpandedNodes: 0,\n            numOfPathNodes: 0,\n            chooseStart: false,\n            chooseGoal: false,\n            changeWall: true\n        }\n    }\n    //after initialization of web, first function that will be executed\n    componentDidMount(){\n        this.setState({board: this.getInitBoard()});\n    }\n    \n    handleMouseDown(row, col){\n        const{board, \n            chooseStart, \n            startnode_row, \n            startnode_col, \n            isBoardClean, \n            chooseGoal, \n            GOALNODE_ROW, \n            GOALNODE_COL,\n            changeWall} = this.state;\n\n        var newBoard;\n        if(chooseStart === true && isBoardClean === true){\n            newBoard = changeStart(board, row, col);\n            const lastStartNode = newBoard[startnode_row][startnode_col]\n            lastStartNode.isStart = false;\n            this.setState({board: newBoard, startnode_row: row, startnode_col: col, chooseStart: false});\n        }\n        else if(chooseGoal === true && isBoardClean === true){\n            newBoard = changeGoal(board, row, col);\n            const lastStartNode = newBoard[GOALNODE_ROW][GOALNODE_COL];\n            lastStartNode.isGoal = false;\n            this.setState({board: newBoard, GOALNODE_ROW: row, GOALNODE_COL: col, chooseGoal: false});\n        }\n        else if(isBoardClean === true){\n            if(board[row][col].isWall === false){\n                this.setState({changeWall: true})\n                newBoard = wallGenerate(board, row, col, true);\n            }\n            else{\n                this.setState({changeWall: false})\n                newBoard = wallGenerate(board, row, col, false);\n            }\n            this.setState({board: newBoard, mouseIsPressed: true});\n        }\n    }\n\n    handleMouseUp(){\n        this.setState({mouseIsPressed: false, changeWall: true});\n    }\n\n    handleMouseEnter(row, col){\n        const {changeWall} = this.state;\n        if(this.state.mouseIsPressed){\n            \n            const newBoard = wallGenerate(this.state.board, row, col, changeWall);\n            this.setState({board: newBoard});\n        }\n    }\n\n    newNode(row, col){\n        return {\n            row,\n            col,\n            isStart: row === this.state.startnode_row && col===this.state.startnode_col,\n            isGoal: row === this.state.GOALNODE_ROW && col===this.state.GOALNODE_COL,\n            isWall: false,\n            isVisited: false,\n            parent: null\n        }\n    }\n\n    getInitBoard(){\n        const board = [];\n        for(let i = 0; i<numOfRows; i++){\n            const currRow = [];\n            for(let j = 0; j<numOfColumns; j++){\n                var node = this.newNode(i, j);\n                currRow.push(node);\n            }\n            board.push(currRow);\n        }\n        return board;\n    }\n\n\n\n    search(algo){\n        if(this.state.isBoardClean){\n            this.setState({isBoardClean: false});\n            this.setState({isRunning: true});\n            var{board} = this.state;\n            var start = board[this.state.startnode_row][this.state.startnode_col];\n            var goal = board[this.state.GOALNODE_ROW][this.state.GOALNODE_COL];\n            var visited;\n            switch(algo){\n                case \"bfs\":\n                    visited = bfs(board, start, goal);\n                    break;\n                case \"dfs\":\n                    visited = dfs(board, start, goal);\n                    break;\n                default:\n                    console.log(\"Nice\");\n                }  \n            \n            if(visited === 0){\n                alert(\"There is no path\");\n            }\n            else{\n                var way = shortWay(goal);\n                this.visualise(visited, way);\n            }\n            this.setState({isRunning: false})\n        }\n        \n    }\n    \n    \n    \n    visualise(visited, path){\n        for(var i = 0; i<=visited.length; i++){\n            this.setState({numOfExpandedNodes: visited.length, numOfPathNodes: path.length+1});\n            if(i===visited.length){\n                setTimeout(()=>{\n                    this.animatePath(path)\n                }, 10*i);\n                return;\n            }\n            const node = visited[i];\n            if(node.isStart){\n                continue;\n            }\n            else{\n                setTimeout(()=>{\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n                }, 10*i)\n            }\n            \n        }\n    }\n    \n    clearGrid(){\n        if(!this.state.isRunning){\n            const {board} = this.state;\n            for(var i = 0; i<board.length; i++){\n                for(var j = 0; j<board[0].length; j++){\n                    const node = board[i][j];\n                    if(!node.isStart && !node.isGoal){\n                        document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\n                        node.isVisited = false;\n                    }\n                    if(node.isWall){\n                        node.isWall = false;\n                    }\n                }\n            }\n            this.setState({isBoardClean: true, numOfExpandedNodes: 0, numOfPathNodes: 0});\n        }\n    }\n    \n    animatePath(path){\n        for(var i = 0; i<path.length; i++){\n            const node = path[i];\n            setTimeout(()=>{\n                document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-path';\n            }, 10*i);\n        }\n    }\n    render() {\n        const{board, mouseIsPressed} = this.state;\n        return (\n          <>\n          <div className=\"instructions results\">\n            <div className='res-item'>Expanded nodes: {this.state.numOfExpandedNodes}</div>\n            <div className='res-item'>Path Length: {this.state.numOfPathNodes}</div>\n          </div>\n           <div className=\"instructions\">\n                <div className = \"instructions-item\">\n                    <span className=\"square node-unvisited\"></span>\n                    Unvisited Node\n                </div>\n                <div className = \"instructions-item\">\n                    <span className=\"square node-visited\"></span>\n                    Visited Node\n                </div>\n                <div className = \"instructions-item\">\n                    <span className=\"square n-start\"></span>\n                    Start Node\n                </div>\n                <div className = \"instructions-item\">\n                    <span className=\"square n-goal\"></span>\n                    Goal Node\n                </div>\n                <div className = \"instructions-item\">\n                    <span className=\"square node-wall\"></span>\n                    Wall Node\n                </div>\n                <div className = \"instructions-item\">\n                    <span className=\"square node-path\"></span>\n                    Path\n                </div>\n            </div>\n            <div className = \"grid\">\n              {board.map((row, rowIdx) => {\n                return (\n                  <div key={rowIdx}>\n                    {row.map((node, nodeIdx) => {\n                      const row = node.row;\n                      const col = node.col;\n                      const isGoal = node.isGoal;\n                      const isStart = node.isStart;\n                      const isWall = node.isWall;\n                      return (\n                        <Node\n                          key={nodeIdx}\n                          col={col}\n                          isGoal={isGoal}\n                          isStart={isStart}\n                          isWall={isWall}\n                          mouseIsPressed={mouseIsPressed}\n                          onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                          onMouseEnter={(row, col) =>\n                            this.handleMouseEnter(row, col)\n                          }\n                          onMouseUp={() => this.handleMouseUp()}\n                          row={row}></Node>\n                      );\n                    })}\n                    \n                  </div>\n                  \n                );\n              })}\n              <div class=\"buttons\">\n            <Button variant=\"btn btn-success\" onClick={() => this.search(\"dfs\")}>DFS</Button>{' '}\n            <Button variant=\"btn btn-success\" onClick={() => this.search(\"bfs\")}>BFS</Button>{' '}\n            \n            <Button variant=\"btn btn-primary\" onClick={() => this.setState({chooseStart: true, chooseGoal: false})}>Choose Start</Button>{' '}\n            <Button variant=\"btn btn-primary\" onClick={() => this.setState({chooseStart: false, chooseGoal: true})}>Choose Goal</Button>{' '}\n            <Button variant=\"btn btn-danger\" onClick={() => this.clearGrid()}>Clear Grid</Button>{' '}\n              </div>\n            </div>\n          </>\n        );\n      }\n    }\n\nconst wallGenerate = (board, row, col, cond)=>{\n    const newBoard = board.slice();\n    const node = newBoard[row][col];\n    if(!node.isStart && !node.isGoal){\n        var newNode;\n        if(cond){\n            newNode = {\n                ...node,\n                isWall: true,\n            };\n        }\n        else{\n            newNode = {\n                ...node,\n                isWall: false\n            };\n        }\n        newBoard[row][col] = newNode;\n    }\n\n    \n    return newBoard;\n}\n\nconst changeStart = (board, row, col)=>{\n    const newBoard = board.slice()\n    const node = newBoard[row][col]\n    if(!node.isGoal && !node.isWall){\n        const newNode = {\n            ...node,\n            isStart: true\n        }\n        newBoard[row][col] = newNode;\n    }\n    document.querySelector(\".node-start\").classList.remove(\"node-start\")\n    return newBoard;\n}\n\nconst changeGoal = (board, row, col)=>{\n    const newBoard = board.slice()\n    const node = newBoard[row][col]\n    if(!node.isStart && !node.isWall){\n        const newNode = {\n            ...node,\n            isGoal: true\n        }\n        newBoard[row][col] = newNode;\n    }\n    document.querySelector(\".node-goal\").classList.remove(\"node-goal\")\n    return newBoard;\n}\n\n\nfunction shortWay(goal){\n    var shortPath = [];\n    var currNode = goal;\n    while(currNode.parent.parent!==null){\n        currNode = currNode.parent;\n        shortPath.unshift(currNode)\n        \n    }\n    return shortPath;\n}","/* eslint-disable no-redeclare */\n/* eslint-disable no-unused-vars */\nexport function bfs(board, start, goal){\n    var visited = [];\n    var queue = [start];\n    while(queue){\n        var curNode = queue.shift();\n        if(curNode === undefined){\n            return 0;\n        }\n        if(curNode === goal){\n            return visited;\n        }\n        \n        if(!curNode.isWall && (!curNode.isVisited||curNode.isStart)){\n            curNode.isVisited = true;\n            visited.push(curNode);\n            const col = curNode.col;\n            const row = curNode.row;\n            \n            \n            var nextNode;\n\n            if(row>0){\n                nextNode = board[row-1][col];\n                if(!nextNode.isVisited){\n                    queue.push(nextNode);\n                    nextNode.parent = curNode;\n                }\n            }\n            if(col>0){\n                nextNode = board[row][col-1];\n                if(!nextNode.isVisited){\n                    queue.push(nextNode);\n                    nextNode.parent = curNode;\n                }\n            }\n            if(row<board.length-1){\n                nextNode = board[row+1][col];\n                if(!nextNode.isVisited){\n                    queue.push(nextNode);\n                    nextNode.parent = curNode;\n                }\n            }\n            if(col<board[0].length-1){\n                nextNode = board[row][col+1];\n                if(!nextNode.isVisited){\n                    queue.push(nextNode);\n                    nextNode.parent = curNode;\n                }\n            }\n\n        }\n        \n    }\n}","export function dfs(board, start, goal){\n    var visited = [];\n    var stack = [start];\n    while(stack){\n        var curNode = stack.pop()\n        if(curNode === undefined){\n            return 0;\n        }\n        if(curNode===goal){\n            return visited;\n        }\n        if(!curNode.isWall && (!curNode.isVisited||curNode.isStart)){\n            curNode.isVisited = true;\n            visited.push(curNode);\n            const col = curNode.col;\n            const row = curNode.row;\n\n            var nextNode;\n            \n        if(row>0){\n                nextNode = board[row-1][col];\n                if(!nextNode.isVisited){\n                    stack.push(nextNode);\n                    nextNode.parent = curNode;\n                }\n        }\n        if(row<board.length-1){\n            nextNode = board[row+1][col];\n            if(!nextNode.isVisited){\n                stack.push(nextNode);\n                nextNode.parent = curNode;\n            }\n        }\n        if(col>0){\n            nextNode = board[row][col-1];\n            if(!nextNode.isVisited){\n                stack.push(nextNode);\n                nextNode.parent = curNode;\n            }\n        }\n        if(col<board[0].length-1){\n            nextNode = board[row][col+1];\n            if(!nextNode.isVisited){\n                stack.push(nextNode);\n                nextNode.parent = curNode;\n            }\n        }\n        \n    }\n    }\n}","import React from 'react';\nimport './App.css';\nimport PathFind from \"./coding/pathFind/PathFind.jsx\"\nimport { Container } from 'react-dom';\nfunction App() {\n  \n  return (\n    <>\n    <div className=\"App-white\">\n      <div className=''>Pathfind Visualizer</div>\n      <PathFind/>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}